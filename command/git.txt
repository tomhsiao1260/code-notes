-----------------------------------------------------------
基本建置

git init                     初始化 git，記得加 .gitignore 檔
git config --list            觀看環境設定
git remote add origin [link] 要遠端的網址(.git結尾)
git remote rm origin         刪除綁定的遠端網址

touch .gitignore             寫入要忽略上傳的檔名(.DS_Store 和 .gitignore)
touch README.md              新增 README.md

git add [file]               加到暫存區
git add .                    將所有檔案加到暫存區
git add -u                   加入所有更動到暫存區，包含刪除
git commit -m "message"      commit 到儲存庫，並附註
git push origin [branch]     push 儲存庫到 GitHub (master, gh-pages)
git push origin [branch] -f  不論是否有遺漏的新版本，直接 push 覆蓋遠端的版本
git push --all               push 所有分支
git pull origin [branch]     pull 遠端資料到本地資料夾，origin 為遠端儲存庫的預設別名

gitmoji --commit             用 gitmoji 取代 git commit
gitmoji --list               可用的 emoji 列表

git fetch origin pull/ID/head:BRANCHNAME 把 PR 載入下來

git remote add origin https://github.com/tomhsiao1260/[REPO].git
git remote set-url origin https://github.com/tomhsiao1260/[REPO].git

-----------------------------------------------------------
push 失敗 (rejected)

代表本地端有遺漏的新版本，使用 pull 
將遠端版本和本地版本合併 (fetch + merge)

pull 成功：即可 push 上遠端
pull 失敗：發生衝突 (conflict)，必須手動合併後
          執行 add -> commit -> push

-----------------------------------------------------------
其他語法

git status                   查看 git 狀態
git log                      查看 commit 紀錄，按 q 退出
git show [commit]            查看某次 commit 的修改 (複製六碼或以上)，按 q 退出
git diff                     查看檔案內容修改變化
git rm --cached [file]       將不在版本庫的檔案移出暫存區
git reset HEAD [file]        將已經在版本庫的檔案移出暫存區(而不會取消版本庫的 tracked)
git reset HEAD --hard        將本地版本重置到與 origin/HEAD 相同 (發生版本衝突時使用)
git reset ORIG_HEAD --hard   回到 merge 前的版本
git reset HEAD^              回到前一個 commit (把意外加入的檔案移出 .git)

git clone [repository]       clone 下專案(若不想衝突記得刪除原始的.git)
git branch [branch]          建立一個新branch，注意要先有過 commit (master, gh-pages)
git checkout [branch]        切換 branch (master, gh-pages)
git branch -a                查看所有的 branch (-a 會顯示 origin 開頭分支)
                             origin/[branch]、origin/HEAD 為本地追蹤分支

git merge [branch]           將所在的 branch 和指定的 branch 合併 (更動了目前的 branch)
                             merge 成功：即可 push 上遠端
                             merge 失敗：發生衝突 (conflict)，必須手動合併後
                                        執行 add -> commit -> push
git fetch origin [branch]    將遠端的儲存庫更新到本地的 origin/[branch] 分支裡
                             其實 git pull origin master 等同於執行了下面兩個指令：
                             git fetch origin master 和 git merge origin/master
git branch -m main [rename]  將 main 名稱改為 rename

-----------------------------------------------------------
清除分支

git branch -a                先查看所有分支 
git branch -D [branch]       刪除某個 local 分支，記得先 checkout 到其他 branch
git push origin :[branch]    刪除某個 remote 追蹤分支 origin/[branch]

-----------------------------------------------------------
git reset --soft HEAD~1         commit 錯了 要移出來重新操作
git rm [filename] --cached  -r  檔案移出 git 的追蹤

-----------------------------------------------------------
強迫將 main 以 develop 的專案覆蓋掉

git checkout develop
git merge --allow-unrelated-histories -s ours main
git checkout main
git merge develop

-----------------------------------------------------------
不小心 push 錯，想回到前次版本可以 ...

git reset HEAD^ --hard       將本地版本重置到與 "前一次" origin/HEAD 相同
git push origin +[branch]    強迫 push 上此次的版本

-----------------------------------------------------------
邀請協作 (Invite a collaborator)

1. 先完成基本建置 (git init 和 git remote add origin 等等)

2. 在 master  下新增名為 develop        的分支 (master 為主體、develop 為開發)
   在 master  下新增名為 hotfix/[name]  的分支 (即時修改 master 的問題)
   在 develop 下新增名為 feature/[name] 的分支 (一些小功能)

   若開發告一段落，可在 master 加 tags:
   git tag 1.0.0-beta1 -a -m "some description" 

3. 將建置發佈到 GitHub:
   git push --all 
   git push --tags

4. 到資料庫下的 setting 左側的 Manage access 點選
   Invite a collaborator (對方會收到 mail 的邀請)

5. 團隊成員下載遠端資料庫，首先 clone 下儲存庫，然後：
   git fetch --all --tags 
   git branch -a
   此時可以看到對應建置的所有本地追蹤分支 origin/[branch]
   若要產生對應建置的 branch，只要執行：
   git checkout [branch]
   git branch -a

6. 若做完 develop 分支，先 add -> commit -> push
   若想進一步 merge 到 master，則在 master 分支下執行：
   git merge develop
   git push origin master
   其他分支的合併也是同樣方法，遇到版本衝突先 pull 下遠端儲存庫

7. 想換分支作業，可以：
   git checkout [branch]
   git pull origin [branch]
   整理完可回到 5. 上傳或是 merge

-----------------------------------------------------------
用 Pull Request 協作

1. fork 專案到自己的目錄

2. git clone 把自己目錄底下的專案抓下來開發

3. 完成後， push 上自己目錄

4. 發 Pull Request 到原本的專案上， 讓主專案的 Owner 合併
   先設定 compare across forks (左邊為 Owner 目錄 <- 右邊為自己目錄)

5. merge 成功： Able to merge -> creare pull request
   merge 失敗： 選 Resolve conflicts 手動合併，完成後走回成功步驟
   Owner 收到後按 merge pull request 表同意合併

6. 可加入 Owner 的本地追蹤分支，以便 pull 下最新專案
   自己的預設為 origin，Owner 分支命名為 upstream：
   git remote add upstream [Owner Git URL]

   檢查是否有追蹤到
   git remote -v

   本地工作到一段可以 pull 下 Owner 的最新專案
   git pull upstream [branch]

7. 除了 merge 方法以外 (需經過 Owner 同意)，其他大致上和 邀請協作 相同

-----------------------------------------------------------
npm 環境下開發

1. npm install gh-pages --save-dev

2. ls -a
   先查看是否有 .git .gitignore

3. git config --list
   git remote add origin [link]

4. 在 package.json 加入
   "home": "https://tomhsiao1260.github.io/[repoName]/",
   "homepage": "https://tomhsiao1260.github.io/[repoName]/",

5. 在 npm script 加入下面這段

   "predeploy": "npm run build",
   "deploy": "gh-pages -d build"

   (predeploy 中的 build 是指 script 中的 build 指令)
   (deploy 中的 build 是指 npm run build 後產生的資料夾名稱)

6. 先把 develop 的版本 push 到 master branch，此步可略
   git status 確定在 master branch
   git add .
   git commit -m "message"
   git push origin main

7. 並執行 npm run deploy
   會把 build 的版本 push 到 gh-pages branch
   可拜訪網址 https://tomhsiao1260.github.io/[repoName]/

8. 下次只要執行 6. 7. 步即可


參考：
https://medium.com/@yystartup/%E7%94%A8-github-pages-%E8%A3%BD%E4%BD%9C-react-demo-site-7840fcb9cc33

-----------------------------------------------------------
重建遠端儲存庫

刪除 repo. 並重建一個新的，刪除下方本地端的檔案
rm -rf .git
rm -rf node_modules
rm package-lock.json
執行 npm install
執行 git init 即回到最上方的基本建置的一開始

-----------------------------------------------------------
使用 Dependabot

當 Dependabot 發現 Library 有 vulnerability 問題
會自動開一個新 branch 並更新到修正後的版本，然後發 PR (和 mail 通知)
開發者只要 merge 即可，此時建立的新 branch 也會自動刪除

Dependabot 已經與 GitHub 合作成為內建工具，開啟方法如下：
Repository -> Settings -> Security & Analysis

1. Dependabot alerts (enable)
2. Dependabot security updates (enable)

參考：https://github.blog/2020-06-01-keep-all-your-packages-up-to-date-with-dependabot/

-----------------------------------------------------------
備份專案

1. clone 下專案，並改名稱
2. git fetch --all --tags 相關的 tags，並把所有 branch 都 checkout 一遍才能記到本地端
3. git remote rm origin 去除原本的 remote 並更新為自己的
4. git push --all && git push --tags 發布所有的 branch 和 tags
5. 注意 issue 和 commit 內的留言本身無法備份，要另外紀錄

-----------------------------------------------------------
Rewrite Git History

1. 觀看歷史檔案大小(kb)，並列出所有 objects 名稱 
git count-objects -v
find .git/objects -type f

2. 列出前十大物件，越下面越大，第一個欄位為檔案的 kb 值
git verify-pack -v .git/objects/pack/pack-bf42e050bf48d6db44c0275b6fc0f40b1ba522e2.idx \
| sort -k 3 -n \
| tail -10

3. 查看某個 SHA1 的檔案名稱，並查看哪些 commit 有這個名稱的檔案
git rev-list --objects --all | grep 9249c
git log --oneline --branches -- index.html

4. 在歷史裡刪除檔案 my-file-name，注意這會讓擁有 index.html 的所以 commit 都改寫，並分別產生新的一組 SHA1 !
git filter-branch --index-filter 'git rm --cached --ignore-unmatch my-file-name' --tag-name-filter cat -- --all

5. 刪除相關的 reference
rm -Rf .git/refs/original && rm -Rf .git/logs/

6. 重新壓縮優化進 pack 物件 (建議每修剪一次都做)
git gc --aggressive --prune=now

7. 並強迫更新改寫後的歷史
git push --all -f && git push --tags -f

只有 4, 5, 6 每刪一個檔案都要執行，7 只要最後整理完執行一次

-----------------------------------------------------------
Rewrite Git History

若是 clone 下來打算另外修剪，記得先 git fetch --all --tags 相關的 tags
並把所有 branch 都 checkout 一遍才能記到本地端

注意 filter-branch 會在某個時間軸後，產生一系列新的 SHA1，並接在對應的 branch 上
舊的 SHA1 還是存在且可訪問，只是不屬於任何 branch
只是本地端或 clone 下來並作為新的 repo 都不會有舊的 SHA1 紀錄，但在遠端 repo 這些舊紀錄都會一直存在
因為遠端不會自動也無法跑 git gc 清理掉 orphan 的 objects

這會導致提到 SHA1 的 commit，或是 issue 留言有提到 SHA1，仍都會指向舊有的那個 (不屬於任一 branch)
但不太確定這些不屬於任一 branch 的 commit 在遠端會不會有天被某種方式意外刪除或更新 ... (應該是不會)

如果是 gh-pages 的 commit 太多造成，可以使用 orphan branch 讓該分支永遠只有一個 commit
已有現成關於 gh-pages 的 git action，而且更動後也不會影響其他分支的 SHA1
可隨時依喜好開啟關閉，開啟 orphan 功能後，gh-pages 的歷史資料會自動從 git 中刪除
https://github.com/peaceiris/actions-gh-pages

官方文件：https://git-scm.com/book/en/v2/Git-Internals-Maintenance-and-Data-Recovery
社群討論: https://github.com/18F/C2/issues/439
社群討論: https://github.com/WordPress/gutenberg/issues/29008

-----------------------------------------------------------
網址：https://git-lfs.github.com/ (Git Large File Storage 管理大檔案)

git lfs track "*.psd"    將 psd 副檔名使用 lfs 管理
git add .gitattributes   將這個新記錄加到 .gitattributes 中 (或自己手動編輯)

上面流程只需在新檔案創建時跑一次，完成後一樣走下面流程：git add -> git commit -> git push
以後就不會 clone 下這些大檔案，如果要載的話可以執行：git lfs pull

-----------------------------------------------------------
切換 Git 帳戶

1. 刪除原始密碼: 本機搜尋 Keychain access (鑰匙圈存取) -> 搜尋 git -> 刪除 github.com
2. push 專案時輸入新帳戶的 username 和 token
3. 完成後記得再執行 1, 2 切換回原始帳戶
-----------------------------------------------------------









