-----------------------------------------------------------

touch      建立檔案
mkdir      建立目錄
rm         刪除檔案
rmdir      刪除目錄
rm -rf     刪除目錄和檔案
rm *.py    刪除此目錄下所有.py檔
ls         列表 
ls -alpt   詳細列表： a(隱藏檔) l(完整資訊) p(顯示較清楚) t(依修改時前排序)
clear      清空畫面
cp [a] [b] 複製 a 到 b 目錄，或複製 a 取名為 b
mv [a] [b] 把 a 移動到 b 目錄
cat        輸出檔案內容在終端機上
pwd        查看位置
&&         執行多個指令 (寫在兩指令中間)
ctr + D    退出當下終端指令
vi [a]     顯示 a 檔內容(沒檔會自動創建)，可按 i 鍵編輯(顯示INSERT)，按 exe 退出編輯，再輸入 :wq 存檔 

cd /file   到 file 資料夾 (絕對路徑)
cd file    到 file 資料夾 (相對路徑)
cd ..      回到前目錄
cd ~       回到 home 目錄
cd Desktop 回到桌面

history               終端機紀錄
history | grep clear  檢視搜尋終端機有 clear 的指令
find . -iname '*.py'  尋找 .py 結尾的檔案

在本地端架一個簡易的server (監聽 port 8000)
python2: python -m SimpleHTTPServer
python3: python3 -m http.server

-----------------------------------------------------------
vscode

shift + alt + F 自動縮排
cmd + P         檔案查詢
ctrl + `        開啟終端
ctrl + tab      切換檔案

cmd + alt + E   檔案欄
cmd + alt + F   關鍵字搜尋
cmd + B         左側選單

-----------------------------------------------------------
虛擬環境

conda create --name [name]      創建
conda activate [name]           啟動
conda env list                  列出
conda deactivate                退出
conda env remove --name [name]  刪除

python -m venv [name]           創建
source [name]/bin/activate      啟動
deactivate                      退出

conda install [name]            安裝套件
conda list                      列出套件

pip install [name]              安裝套件
pip list                        列出套件
pip freeze > requirements.txt   紀錄套件
pip install -r requirements.txt 安裝套件
pip install --upgrade pip       更新 pip

jupyter nbconvert --to python [name].ipynb .ipynb轉.py

-----------------------------------------------------------
Hugging Face

create a space & git clone

python3 -m venv env
source env/bin/activate
echo "env/" >> .gitignore

python3 --version
python_version: 3.x.x (update README.md)

pip3 install gradio
pip3 freeze > requirements.txt

touch app.py & coding
python3 app.py

git add -> commit -> push

API Testing
URL: https://USER_NAME-SPACE_NAME.hf.space/run/predict
Body: { "data": [ "hi" ] } (JSON)

來源：https://www.tomsoderlund.com/ai/building-ai-powered-rest-api

-----------------------------------------------------------

cd SPACE_NAME
.zshrc 設定

模板: https://github.com/ohmyzsh/ohmyzsh/blob/master/templates/zshrc.zsh-template

1.資料庫路徑設定
export PATH=$PATH:/Applications/Postgres.app/Contents/Versions/latest/bin
export PATH="$PATH:/Applications/Visual Studio Code.app/Contents/Resources/app/bin"

2. Ruby 路徑設定
if [ -d "/usr/local/opt/ruby/bin" ]; then
  export PATH=/usr/local/opt/ruby/bin:$PATH
  export PATH=`gem environment gemdir`/bin:$PATH
fi

3.一些參數設定
export ZSH=$HOME/.oh-my-zsh
export JAVA_HOME=$(/usr/libexec/java_home)
export DEFAULT_USER="$(whoami)"
export NVM_DIR=~/.nvm
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"

4.主題選擇
ZSH_THEME="agnoster"

也可手動開啟編輯: Finder -> 前往 -> 個人專屬 -> 開啟隱藏檔.zshrc
vscode 路徑是為了使用 code . 指令開啟應用
-----------------------------------------------------------





